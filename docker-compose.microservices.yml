version: '3.8'

services:
  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: rag-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger HTTP endpoint
      - "6831:6831/udp"  # Jaeger agent UDP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - rag-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rag-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: rag-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - rag-network
    depends_on:
      - prometheus

  # Document Processing Service
  document-processor:
    build:
      context: .
      dockerfile: services/document_processor/Dockerfile
    container_name: rag-document-processor
    ports:
      - "8001:8001"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=INFO
    volumes:
      - ./uploads:/app/uploads
      - ./models:/app/models
    networks:
      - rag-network
    depends_on:
      - redis
      - jaeger
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Query Intelligence Service
  query-intelligence:
    build:
      context: .
      dockerfile: services/query_intelligence/Dockerfile
    container_name: rag-query-intelligence
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
    networks:
      - rag-network
    depends_on:
      - redis
      - jaeger
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Vector Search Service
  vector-search:
    build:
      context: .
      dockerfile: services/vector_search/Dockerfile
    container_name: rag-vector-search
    ports:
      - "8003:8003"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - CHROMADB_HOST=chromadb
      - LOG_LEVEL=INFO
    volumes:
      - ./vector_store:/app/vector_store
      - ./models:/app/models
    networks:
      - rag-network
    depends_on:
      - redis
      - jaeger
      - chromadb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ChromaDB Vector Database
  chromadb:
    image: ghcr.io/chroma-core/chroma:0.4.15
    container_name: rag-chromadb
    ports:
      - "8888:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - CHROMA_SERVER_AUTHN_CREDENTIALS_FILE=/chroma/auth.txt
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic.BasicAuthServerProvider
    networks:
      - rag-network

  # Observability Service
  observability:
    build:
      context: .
      dockerfile: services/observability/Dockerfile
    container_name: rag-observability
    ports:
      - "8004:8004"
      - "9091:9091"  # Prometheus metrics endpoint
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - PROMETHEUS_PORT=9091
      - LOG_LEVEL=INFO
    networks:
      - rag-network
    depends_on:
      - redis
      - jaeger
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api_gateway/Dockerfile
    container_name: rag-api-gateway
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - DOCUMENT_PROCESSOR_URL=http://document-processor:8001
      - QUERY_INTELLIGENCE_URL=http://query-intelligence:8002
      - VECTOR_SEARCH_URL=http://vector-search:8003
      - OBSERVABILITY_URL=http://observability:8004
      - LOG_LEVEL=INFO
    networks:
      - rag-network
    depends_on:
      - redis
      - jaeger
      - document-processor
      - query-intelligence
      - vector-search
      - observability
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:1.25-alpine
    container_name: rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    networks:
      - rag-network
    depends_on:
      - api-gateway

networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  chromadb_data:
    driver: local