{
  "timestamp": "2025-08-06T13:29:32.018802",
  "summary": {
    "total_modules": 33,
    "total_test_files": 10,
    "covered_modules": 10,
    "uncovered_modules": 14,
    "coverage_percentage": 38.484848484848484
  },
  "function_coverage": {
    "demo_model_manager": 0.0,
    "setup": 100.0,
    "app": 0.0,
    "setup_redis": 0.0,
    "services.__init__": 100.0,
    "src.multimodal_rag": 5.0,
    "src.advanced_pdf_processor": 7.894736842105263,
    "src.enhanced_rag": 3.79746835443038,
    "src.hybrid_search": 0.0,
    "src.cross_reference_engine": 0.0,
    "src.config": 100.0,
    "src.reranker": 0.0,
    "src.query_intelligence": 0.0,
    "src.vector_store": 20.0,
    "src.rag_chain": 20.0,
    "src.evaluation": 0.0,
    "src.document_intelligence": 0.0,
    "src.adaptive_chunking": 0.0,
    "src.__init__": 100.0,
    "src.embedding_service": 22.22222222222222,
    "src.model_manager": 0.0,
    "src.universal_file_processor": 5.0,
    "src.offline_rag": 0.0,
    "src.document_loader": 32.142857142857146,
    "src.graph_enhanced_rag": 0.0,
    "src.redis_cache": 0.0,
    "src.advanced_query_intelligence": 0.0,
    "services.document_processor.service": 0.0,
    "services.api_gateway.gateway": 0.0,
    "services.observability.monitoring": 0.0,
    "services.query_intelligence.service": 0.0,
    "services.vector_search.service": 0.0,
    "services.base.service_base": 0.0
  },
  "class_coverage": {
    "demo_model_manager": 100.0,
    "setup": 100.0,
    "app": 100.0,
    "setup_redis": 100.0,
    "services.__init__": 100.0,
    "src.multimodal_rag": 0.0,
    "src.advanced_pdf_processor": 0.0,
    "src.enhanced_rag": 0.0,
    "src.hybrid_search": 0.0,
    "src.cross_reference_engine": 0.0,
    "src.config": 0.0,
    "src.reranker": 0.0,
    "src.query_intelligence": 0.0,
    "src.vector_store": 0.0,
    "src.rag_chain": 0.0,
    "src.evaluation": 0.0,
    "src.document_intelligence": 0.0,
    "src.adaptive_chunking": 0.0,
    "src.__init__": 100.0,
    "src.embedding_service": 0.0,
    "src.model_manager": 0.0,
    "src.universal_file_processor": 0.0,
    "src.offline_rag": 0.0,
    "src.document_loader": 0.0,
    "src.graph_enhanced_rag": 0.0,
    "src.redis_cache": 0.0,
    "src.advanced_query_intelligence": 0.0,
    "services.document_processor.service": 0.0,
    "services.api_gateway.gateway": 0.0,
    "services.observability.monitoring": 0.0,
    "services.query_intelligence.service": 0.0,
    "services.vector_search.service": 0.0,
    "services.base.service_base": 0.0
  },
  "detailed_analysis": {
    "module_breakdown": {
      "total_source_files": 33,
      "total_test_files": 10,
      "fully_covered": 10,
      "partially_covered": 9,
      "uncovered": 14
    },
    "lines_of_code": {
      "source_lines": 16723,
      "test_lines": 5739,
      "test_to_source_ratio": 0.3431800514261795
    },
    "complexity_analysis": {
      "high_complexity_modules": [
        {
          "name": "demo_model_manager",
          "complexity": 18,
          "functions": 1
        },
        {
          "name": "app",
          "complexity": 464,
          "functions": 5
        },
        {
          "name": "setup_redis",
          "complexity": 49,
          "functions": 8
        },
        {
          "name": "src.multimodal_rag",
          "complexity": 226,
          "functions": 60
        },
        {
          "name": "src.advanced_pdf_processor",
          "complexity": 121,
          "functions": 38
        },
        {
          "name": "src.enhanced_rag",
          "complexity": 273,
          "functions": 79
        },
        {
          "name": "src.hybrid_search",
          "complexity": 101,
          "functions": 38
        },
        {
          "name": "src.cross_reference_engine",
          "complexity": 138,
          "functions": 38
        },
        {
          "name": "src.reranker",
          "complexity": 81,
          "functions": 35
        },
        {
          "name": "src.query_intelligence",
          "complexity": 111,
          "functions": 34
        },
        {
          "name": "src.vector_store",
          "complexity": 35,
          "functions": 20
        },
        {
          "name": "src.rag_chain",
          "complexity": 38,
          "functions": 20
        },
        {
          "name": "src.evaluation",
          "complexity": 153,
          "functions": 67
        },
        {
          "name": "src.document_intelligence",
          "complexity": 142,
          "functions": 34
        },
        {
          "name": "src.adaptive_chunking",
          "complexity": 196,
          "functions": 70
        },
        {
          "name": "src.embedding_service",
          "complexity": 27,
          "functions": 18
        },
        {
          "name": "src.model_manager",
          "complexity": 89,
          "functions": 49
        },
        {
          "name": "src.universal_file_processor",
          "complexity": 148,
          "functions": 40
        },
        {
          "name": "src.offline_rag",
          "complexity": 62,
          "functions": 20
        },
        {
          "name": "src.document_loader",
          "complexity": 68,
          "functions": 28
        },
        {
          "name": "src.graph_enhanced_rag",
          "complexity": 181,
          "functions": 74
        },
        {
          "name": "src.redis_cache",
          "complexity": 120,
          "functions": 62
        },
        {
          "name": "src.advanced_query_intelligence",
          "complexity": 187,
          "functions": 62
        },
        {
          "name": "services.document_processor.service",
          "complexity": 53,
          "functions": 24
        },
        {
          "name": "services.api_gateway.gateway",
          "complexity": 109,
          "functions": 58
        },
        {
          "name": "services.observability.monitoring",
          "complexity": 126,
          "functions": 55
        },
        {
          "name": "services.query_intelligence.service",
          "complexity": 150,
          "functions": 45
        },
        {
          "name": "services.vector_search.service",
          "complexity": 140,
          "functions": 57
        },
        {
          "name": "services.base.service_base",
          "complexity": 79,
          "functions": 57
        }
      ],
      "untested_high_complexity": [
        "demo_model_manager",
        "app",
        "src.hybrid_search",
        "src.query_intelligence",
        "src.document_intelligence",
        "src.adaptive_chunking",
        "src.model_manager",
        "src.offline_rag",
        "src.advanced_query_intelligence",
        "services.api_gateway.gateway",
        "services.observability.monitoring",
        "services.base.service_base"
      ],
      "avg_complexity": 111.81818181818181
    },
    "test_quality": {
      "total_test_functions": 117,
      "total_test_classes": 8,
      "avg_tests_per_module": 3.5454545454545454
    }
  },
  "recommendations": [
    "\ud83d\udd34 PRIORITY: Create unit tests for 14 completely untested modules",
    "\u26a1 Urgent: Focus on services.base.service_base, app, src.query_intelligence, src.advanced_query_intelligence (high complexity/function count)",
    "\ud83d\udd17 Add more integration tests to validate component interactions",
    "\ud83c\udfe2 Implement comprehensive end-to-end testing for enterprise workflows"
  ],
  "uncovered_module_list": [
    "services.__init__",
    "services.base.service_base",
    "app",
    "src.query_intelligence",
    "src.advanced_query_intelligence",
    "src.model_manager",
    "services.observability.monitoring",
    "src.document_intelligence",
    "src.hybrid_search",
    "src.offline_rag",
    "demo_model_manager",
    "services.api_gateway.gateway",
    "src.adaptive_chunking",
    "src.__init__"
  ],
  "covered_module_list": [
    "src.enhanced_rag",
    "src.embedding_service",
    "setup",
    "src.config",
    "src.vector_store",
    "src.document_loader",
    "src.universal_file_processor",
    "src.rag_chain",
    "src.multimodal_rag",
    "src.advanced_pdf_processor"
  ],
  "test_categories": {
    "Unit Tests": 2,
    "Integration Tests": 1,
    "End-to-End Tests": 1,
    "Performance Tests": 1,
    "Security Tests": 1,
    "Enterprise Validation": 2,
    "Format Tests": 2
  },
  "module_details": {
    "demo_model_manager": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/demo_model_manager.py",
      "functions": [
        "main"
      ],
      "classes": [],
      "lines_of_code": 129,
      "complexity_score": 18
    },
    "setup": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/setup.py",
      "functions": [],
      "classes": [],
      "lines_of_code": 51,
      "complexity_score": 0
    },
    "app": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/app.py",
      "functions": [
        "initialize_system",
        "save_uploaded_file",
        "display_sources",
        "main",
        "update_progress"
      ],
      "classes": [],
      "lines_of_code": 2272,
      "complexity_score": 464
    },
    "setup_redis": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/setup_redis.py",
      "functions": [
        "check_redis_installation",
        "install_redis_mac",
        "install_redis_linux",
        "start_redis_server",
        "test_redis_connection",
        "create_redis_config",
        "create_env_template",
        "main"
      ],
      "classes": [],
      "lines_of_code": 209,
      "complexity_score": 49
    },
    "services.__init__": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/services/__init__.py",
      "functions": [],
      "classes": [],
      "lines_of_code": 6,
      "complexity_score": 0
    },
    "src.multimodal_rag": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/multimodal_rag.py",
      "functions": [
        "MultiModalElement.to_dict",
        "TableProcessor.__init__",
        "TableProcessor.extract_tables_from_html",
        "TableProcessor.extract_tables_from_text",
        "TableProcessor._is_table_row",
        "TableProcessor._parse_text_table",
        "TableProcessor._analyze_table",
        "TableProcessor._generate_table_description",
        "ImageProcessor.__init__",
        "ImageProcessor._initialize_models",
        "ImageProcessor.process_image",
        "ImageProcessor._analyze_image",
        "ImageProcessor._get_dominant_colors",
        "ImageProcessor._generate_ai_description",
        "ImageProcessor._detect_objects",
        "ImageProcessor._extract_text_from_image",
        "ImageProcessor._enhance_image_for_ocr",
        "ImageProcessor._analyze_chart",
        "ImageProcessor._generate_image_description",
        "MultiModalRAG.__init__",
        "MultiModalRAG.process_document",
        "MultiModalRAG.process_pdf_elements",
        "MultiModalRAG._enhance_pdf_table",
        "MultiModalRAG._enhance_pdf_image",
        "MultiModalRAG._looks_like_date",
        "MultiModalRAG.query_multimodal_elements",
        "MultiModalRAG.get_element_summary",
        "MultiModalRAG.export_elements",
        "MultiModalRAG.clear_elements",
        "MultiModalRAG.get_capabilities",
        "to_dict",
        "__init__",
        "extract_tables_from_html",
        "extract_tables_from_text",
        "_is_table_row",
        "_parse_text_table",
        "_analyze_table",
        "_generate_table_description",
        "__init__",
        "_initialize_models",
        "process_image",
        "_analyze_image",
        "_get_dominant_colors",
        "_generate_ai_description",
        "_detect_objects",
        "_extract_text_from_image",
        "_enhance_image_for_ocr",
        "_analyze_chart",
        "_generate_image_description",
        "__init__",
        "process_document",
        "process_pdf_elements",
        "_enhance_pdf_table",
        "_enhance_pdf_image",
        "_looks_like_date",
        "query_multimodal_elements",
        "get_element_summary",
        "export_elements",
        "clear_elements",
        "get_capabilities"
      ],
      "classes": [
        "MultiModalElement",
        "TableAnalysis",
        "ImageAnalysis",
        "TableProcessor",
        "ImageProcessor",
        "MultiModalRAG"
      ],
      "lines_of_code": 772,
      "complexity_score": 226
    },
    "src.advanced_pdf_processor": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/advanced_pdf_processor.py",
      "functions": [
        "PDFLayoutElement.get_area",
        "PDFLayoutElement.overlaps_with",
        "AdvancedPDFProcessor.__init__",
        "AdvancedPDFProcessor.process_pdf",
        "AdvancedPDFProcessor._extract_text_with_layout",
        "AdvancedPDFProcessor._analyze_text_layout",
        "AdvancedPDFProcessor._detect_columns",
        "AdvancedPDFProcessor._extract_tables_from_pdf",
        "AdvancedPDFProcessor._extract_tables_pdfplumber",
        "AdvancedPDFProcessor._extract_tables_camelot",
        "AdvancedPDFProcessor._extract_tables_tabula",
        "AdvancedPDFProcessor._clean_table_dataframe",
        "AdvancedPDFProcessor._generate_table_description",
        "AdvancedPDFProcessor._deduplicate_tables",
        "AdvancedPDFProcessor._tables_are_similar",
        "AdvancedPDFProcessor._extract_images_from_pdf",
        "AdvancedPDFProcessor._analyze_page_layouts",
        "AdvancedPDFProcessor.get_processing_summary",
        "AdvancedPDFProcessor.clear_cache",
        "get_area",
        "overlaps_with",
        "__init__",
        "process_pdf",
        "_extract_text_with_layout",
        "_analyze_text_layout",
        "_detect_columns",
        "_extract_tables_from_pdf",
        "_extract_tables_pdfplumber",
        "_extract_tables_camelot",
        "_extract_tables_tabula",
        "_clean_table_dataframe",
        "_generate_table_description",
        "_deduplicate_tables",
        "_tables_are_similar",
        "_extract_images_from_pdf",
        "_analyze_page_layouts",
        "get_processing_summary",
        "clear_cache"
      ],
      "classes": [
        "PDFLayoutElement",
        "PDFPageAnalysis",
        "AdvancedPDFProcessor"
      ],
      "lines_of_code": 517,
      "complexity_score": 121
    },
    "src.enhanced_rag": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/enhanced_rag.py",
      "functions": [
        "EnhancedRAG.__init__",
        "EnhancedRAG.initialize",
        "EnhancedRAG.process_documents",
        "EnhancedRAG.ask_question",
        "EnhancedRAG.search_documents",
        "EnhancedRAG.search_documents_hybrid",
        "EnhancedRAG.get_search_analytics",
        "EnhancedRAG.rerank_results",
        "EnhancedRAG.evaluate_query",
        "EnhancedRAG.run_evaluation_suite",
        "EnhancedRAG.get_evaluation_summary",
        "EnhancedRAG.export_evaluation_results",
        "EnhancedRAG.get_document_insights",
        "EnhancedRAG.get_relationship_analysis",
        "EnhancedRAG.get_smart_suggestions",
        "EnhancedRAG.get_system_status",
        "EnhancedRAG.get_model_manager_status",
        "EnhancedRAG._extract_document_context",
        "EnhancedRAG._extract_main_concept",
        "EnhancedRAG.get_multimodal_elements",
        "EnhancedRAG.get_tables",
        "EnhancedRAG.get_images",
        "EnhancedRAG.get_processing_summary",
        "EnhancedRAG.search_multimodal_content",
        "EnhancedRAG.get_query_analytics",
        "EnhancedRAG.get_adaptive_chunking_analytics",
        "EnhancedRAG.get_chunk_details",
        "EnhancedRAG.get_cache_stats",
        "EnhancedRAG.clear_cache",
        "EnhancedRAG.warm_cache",
        "EnhancedRAG.query_multimodal_elements",
        "EnhancedRAG.get_multimodal_summary",
        "EnhancedRAG.export_multimodal_elements",
        "EnhancedRAG.query_knowledge_graph",
        "EnhancedRAG.get_entity_context",
        "EnhancedRAG.get_knowledge_graph_stats",
        "EnhancedRAG.export_knowledge_graph",
        "EnhancedRAG.enhanced_search_with_graph",
        "EnhancedRAG._merge_search_and_graph_results",
        "__init__",
        "initialize",
        "process_documents",
        "ask_question",
        "search_documents",
        "search_documents_hybrid",
        "get_search_analytics",
        "rerank_results",
        "evaluate_query",
        "run_evaluation_suite",
        "get_evaluation_summary",
        "export_evaluation_results",
        "get_document_insights",
        "get_relationship_analysis",
        "get_smart_suggestions",
        "get_system_status",
        "get_model_manager_status",
        "_extract_document_context",
        "_extract_main_concept",
        "get_multimodal_elements",
        "get_tables",
        "get_images",
        "get_processing_summary",
        "search_multimodal_content",
        "get_query_analytics",
        "get_adaptive_chunking_analytics",
        "get_chunk_details",
        "get_cache_stats",
        "clear_cache",
        "warm_cache",
        "query_multimodal_elements",
        "get_multimodal_summary",
        "export_multimodal_elements",
        "query_knowledge_graph",
        "get_entity_context",
        "get_knowledge_graph_stats",
        "export_knowledge_graph",
        "enhanced_search_with_graph",
        "_merge_search_and_graph_results",
        "rag_callable"
      ],
      "classes": [
        "EnhancedRAG"
      ],
      "lines_of_code": 1125,
      "complexity_score": 273
    },
    "src.hybrid_search": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/hybrid_search.py",
      "functions": [
        "BM25Retriever.__init__",
        "BM25Retriever._preprocess_text",
        "BM25Retriever.fit",
        "BM25Retriever._calculate_idf",
        "BM25Retriever._calculate_score",
        "BM25Retriever.search",
        "QueryExpander.__init__",
        "QueryExpander.expand_query",
        "ReciprocalRankFusion.__init__",
        "ReciprocalRankFusion.fuse_rankings",
        "HybridSearchEngine.__init__",
        "HybridSearchEngine.initialize",
        "HybridSearchEngine.search_bm25",
        "HybridSearchEngine.search_vector",
        "HybridSearchEngine.search_hybrid",
        "HybridSearchEngine.search",
        "HybridSearchEngine.get_search_analytics",
        "HybridSearchEngine.update_weights",
        "HybridSearchEngine.get_status",
        "__init__",
        "_preprocess_text",
        "fit",
        "_calculate_idf",
        "_calculate_score",
        "search",
        "__init__",
        "expand_query",
        "__init__",
        "fuse_rankings",
        "__init__",
        "initialize",
        "search_bm25",
        "search_vector",
        "search_hybrid",
        "search",
        "get_search_analytics",
        "update_weights",
        "get_status"
      ],
      "classes": [
        "SearchResult",
        "BM25Retriever",
        "QueryExpander",
        "ReciprocalRankFusion",
        "HybridSearchEngine"
      ],
      "lines_of_code": 449,
      "complexity_score": 101
    },
    "src.cross_reference_engine": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/cross_reference_engine.py",
      "functions": [
        "CrossReferenceEngine.__init__",
        "CrossReferenceEngine.analyze_document_relationships",
        "CrossReferenceEngine._create_document_fingerprints",
        "CrossReferenceEngine._calculate_avg_sentence_length",
        "CrossReferenceEngine._extract_key_terms",
        "CrossReferenceEngine._classify_document_type",
        "CrossReferenceEngine._calculate_formality_score",
        "CrossReferenceEngine._calculate_technical_density",
        "CrossReferenceEngine._calculate_document_similarities",
        "CrossReferenceEngine._classify_similarity_strength",
        "CrossReferenceEngine._detect_contradictions",
        "CrossReferenceEngine._find_contradictory_statements",
        "CrossReferenceEngine._detect_agreements",
        "CrossReferenceEngine._find_supporting_statements",
        "CrossReferenceEngine._build_relationship_graph",
        "CrossReferenceEngine._detect_citations_and_references",
        "CrossReferenceEngine._extract_context",
        "CrossReferenceEngine._analyze_temporal_relationships",
        "CrossReferenceEngine._generate_relationship_insights",
        "__init__",
        "analyze_document_relationships",
        "_create_document_fingerprints",
        "_calculate_avg_sentence_length",
        "_extract_key_terms",
        "_classify_document_type",
        "_calculate_formality_score",
        "_calculate_technical_density",
        "_calculate_document_similarities",
        "_classify_similarity_strength",
        "_detect_contradictions",
        "_find_contradictory_statements",
        "_detect_agreements",
        "_find_supporting_statements",
        "_build_relationship_graph",
        "_detect_citations_and_references",
        "_extract_context",
        "_analyze_temporal_relationships",
        "_generate_relationship_insights"
      ],
      "classes": [
        "CrossReferenceEngine"
      ],
      "lines_of_code": 500,
      "complexity_score": 138
    },
    "src.config": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/config.py",
      "functions": [
        "Config.validate_api_keys",
        "Config.get_available_llm_provider",
        "validate_api_keys",
        "get_available_llm_provider"
      ],
      "classes": [
        "Config"
      ],
      "lines_of_code": 47,
      "complexity_score": 5
    },
    "src.reranker": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/reranker.py",
      "functions": [
        "CrossEncoderReranker.__init__",
        "CrossEncoderReranker.initialize",
        "CrossEncoderReranker._generate_cache_key",
        "CrossEncoderReranker._prepare_query_document_pairs",
        "CrossEncoderReranker._batch_predict",
        "CrossEncoderReranker._calculate_confidence",
        "CrossEncoderReranker._apply_diversity_boost",
        "CrossEncoderReranker.rerank",
        "CrossEncoderReranker.rerank_with_explanation",
        "CrossEncoderReranker.update_parameters",
        "CrossEncoderReranker.get_statistics",
        "CrossEncoderReranker.clear_cache",
        "CrossEncoderReranker.export_cache",
        "CrossEncoderReranker.import_cache",
        "FallbackReranker.__init__",
        "FallbackReranker.initialize",
        "FallbackReranker.rerank",
        "create_reranker",
        "__init__",
        "initialize",
        "_generate_cache_key",
        "_prepare_query_document_pairs",
        "_batch_predict",
        "_calculate_confidence",
        "_apply_diversity_boost",
        "rerank",
        "rerank_with_explanation",
        "update_parameters",
        "get_statistics",
        "clear_cache",
        "export_cache",
        "import_cache",
        "__init__",
        "initialize",
        "rerank"
      ],
      "classes": [
        "RerankingResult",
        "CrossEncoderReranker",
        "FallbackReranker"
      ],
      "lines_of_code": 446,
      "complexity_score": 81
    },
    "src.query_intelligence": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/query_intelligence.py",
      "functions": [
        "QueryIntelligence.__init__",
        "QueryIntelligence.enhance_query",
        "QueryIntelligence._update_query_history",
        "QueryIntelligence._analyze_query_intent",
        "QueryIntelligence._estimate_query_difficulty",
        "QueryIntelligence._extract_query_concepts",
        "QueryIntelligence._expand_query_terms",
        "QueryIntelligence._generate_intelligent_suggestions",
        "QueryIntelligence._extract_document_themes",
        "QueryIntelligence._extract_recent_topics",
        "QueryIntelligence._generate_document_specific_suggestions",
        "QueryIntelligence._generate_follow_up_questions",
        "QueryIntelligence._analyze_query_complexity",
        "QueryIntelligence._get_complexity_suggestions",
        "QueryIntelligence._generate_query_alternatives",
        "QueryIntelligence.get_trending_queries",
        "QueryIntelligence.suggest_exploration_paths",
        "__init__",
        "enhance_query",
        "_update_query_history",
        "_analyze_query_intent",
        "_estimate_query_difficulty",
        "_extract_query_concepts",
        "_expand_query_terms",
        "_generate_intelligent_suggestions",
        "_extract_document_themes",
        "_extract_recent_topics",
        "_generate_document_specific_suggestions",
        "_generate_follow_up_questions",
        "_analyze_query_complexity",
        "_get_complexity_suggestions",
        "_generate_query_alternatives",
        "get_trending_queries",
        "suggest_exploration_paths"
      ],
      "classes": [
        "QueryIntelligence"
      ],
      "lines_of_code": 447,
      "complexity_score": 111
    },
    "src.vector_store": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/vector_store.py",
      "functions": [
        "VectorStoreManager.__init__",
        "VectorStoreManager.create_vector_store",
        "VectorStoreManager.load_vector_store",
        "VectorStoreManager.add_documents",
        "VectorStoreManager.similarity_search",
        "VectorStoreManager.similarity_search_with_score",
        "VectorStoreManager.get_retriever",
        "VectorStoreManager.reset_vector_store",
        "VectorStoreManager.get_collection_info",
        "VectorStoreManager.export_documents",
        "__init__",
        "create_vector_store",
        "load_vector_store",
        "add_documents",
        "similarity_search",
        "similarity_search_with_score",
        "get_retriever",
        "reset_vector_store",
        "get_collection_info",
        "export_documents"
      ],
      "classes": [
        "VectorStoreManager"
      ],
      "lines_of_code": 170,
      "complexity_score": 35
    },
    "src.rag_chain": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/rag_chain.py",
      "functions": [
        "RAGChain.__init__",
        "RAGChain.initialize",
        "RAGChain._create_qa_chains",
        "RAGChain.process_documents",
        "RAGChain.ask_question",
        "RAGChain._format_sources",
        "RAGChain.get_conversation_history",
        "RAGChain.clear_conversation_history",
        "RAGChain.search_documents",
        "RAGChain.get_system_status",
        "__init__",
        "initialize",
        "_create_qa_chains",
        "process_documents",
        "ask_question",
        "_format_sources",
        "get_conversation_history",
        "clear_conversation_history",
        "search_documents",
        "get_system_status"
      ],
      "classes": [
        "RAGChain"
      ],
      "lines_of_code": 220,
      "complexity_score": 38
    },
    "src.evaluation": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/evaluation.py",
      "functions": [
        "RetrievalEvaluator.__init__",
        "RetrievalEvaluator.calculate_precision_at_k",
        "RetrievalEvaluator.calculate_recall_at_k",
        "RetrievalEvaluator.calculate_f1_at_k",
        "RetrievalEvaluator.calculate_mrr",
        "RetrievalEvaluator.calculate_ndcg_at_k",
        "RetrievalEvaluator.calculate_hit_rate_at_k",
        "RetrievalEvaluator.calculate_average_precision",
        "RetrievalEvaluator.evaluate_retrieval",
        "GenerationEvaluator.__init__",
        "GenerationEvaluator.calculate_semantic_similarity",
        "GenerationEvaluator.calculate_faithfulness",
        "GenerationEvaluator.calculate_answer_relevancy",
        "GenerationEvaluator.calculate_context_precision",
        "GenerationEvaluator.calculate_context_recall",
        "GenerationEvaluator.calculate_hallucination_score",
        "GenerationEvaluator.calculate_coherence_score",
        "GenerationEvaluator.calculate_completeness_score",
        "GenerationEvaluator.evaluate_generation",
        "QualityEvaluator.__init__",
        "QualityEvaluator.calculate_bleu_score",
        "QualityEvaluator.calculate_rouge_scores",
        "QualityEvaluator.calculate_fluency_score",
        "QualityEvaluator.calculate_readability_score",
        "QualityEvaluator.evaluate_quality",
        "RAGEvaluator.__init__",
        "RAGEvaluator.evaluate_single_query",
        "RAGEvaluator.evaluate_dataset",
        "RAGEvaluator.calculate_aggregate_metrics",
        "RAGEvaluator.export_results",
        "RAGEvaluator.get_summary_report",
        "RAGEvaluator.clear_history",
        "create_sample_evaluation_dataset",
        "__init__",
        "calculate_precision_at_k",
        "calculate_recall_at_k",
        "calculate_f1_at_k",
        "calculate_mrr",
        "calculate_ndcg_at_k",
        "calculate_hit_rate_at_k",
        "calculate_average_precision",
        "evaluate_retrieval",
        "__init__",
        "calculate_semantic_similarity",
        "calculate_faithfulness",
        "calculate_answer_relevancy",
        "calculate_context_precision",
        "calculate_context_recall",
        "calculate_hallucination_score",
        "calculate_coherence_score",
        "calculate_completeness_score",
        "evaluate_generation",
        "__init__",
        "calculate_bleu_score",
        "calculate_rouge_scores",
        "calculate_fluency_score",
        "calculate_readability_score",
        "evaluate_quality",
        "__init__",
        "evaluate_single_query",
        "evaluate_dataset",
        "calculate_aggregate_metrics",
        "export_results",
        "get_summary_report",
        "clear_history",
        "get_ngrams",
        "count_syllables"
      ],
      "classes": [
        "RetrievalMetrics",
        "GenerationMetrics",
        "QualityMetrics",
        "EvaluationResult",
        "RetrievalEvaluator",
        "GenerationEvaluator",
        "QualityEvaluator",
        "RAGEvaluator"
      ],
      "lines_of_code": 796,
      "complexity_score": 153
    },
    "src.document_intelligence": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/document_intelligence.py",
      "functions": [
        "DocumentIntelligence.__init__",
        "DocumentIntelligence._ensure_nltk_data",
        "DocumentIntelligence.generate_document_insights",
        "DocumentIntelligence._generate_intelligent_summary",
        "DocumentIntelligence._score_sentences",
        "DocumentIntelligence._create_executive_summary",
        "DocumentIntelligence._extract_key_concepts",
        "DocumentIntelligence._extract_named_entities",
        "DocumentIntelligence._calculate_document_stats",
        "DocumentIntelligence._analyze_complexity",
        "DocumentIntelligence._count_syllables",
        "DocumentIntelligence._get_audience_recommendation",
        "DocumentIntelligence._perform_topic_clustering",
        "DocumentIntelligence._calculate_readability",
        "DocumentIntelligence._extract_temporal_info",
        "DocumentIntelligence._assess_document_quality",
        "DocumentIntelligence._generate_quality_recommendations",
        "__init__",
        "_ensure_nltk_data",
        "generate_document_insights",
        "_generate_intelligent_summary",
        "_score_sentences",
        "_create_executive_summary",
        "_extract_key_concepts",
        "_extract_named_entities",
        "_calculate_document_stats",
        "_analyze_complexity",
        "_count_syllables",
        "_get_audience_recommendation",
        "_perform_topic_clustering",
        "_calculate_readability",
        "_extract_temporal_info",
        "_assess_document_quality",
        "_generate_quality_recommendations"
      ],
      "classes": [
        "DocumentIntelligence"
      ],
      "lines_of_code": 429,
      "complexity_score": 142
    },
    "src.adaptive_chunking": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/adaptive_chunking.py",
      "functions": [
        "ChunkMetadata.__post_init__",
        "AdaptiveChunk.__post_init__",
        "AdaptiveChunk.to_langchain_document",
        "DocumentStructureAnalyzer.__init__",
        "DocumentStructureAnalyzer.analyze_structure",
        "DocumentStructureAnalyzer._calculate_complexity_indicators",
        "SemanticCoherenceAnalyzer.__init__",
        "SemanticCoherenceAnalyzer.calculate_coherence_score",
        "SemanticCoherenceAnalyzer._semantic_coherence",
        "SemanticCoherenceAnalyzer._lexical_coherence",
        "SemanticCoherenceAnalyzer.find_optimal_boundaries",
        "AdaptiveChunker.__init__",
        "AdaptiveChunker.chunk_documents",
        "AdaptiveChunker._chunk_single_document",
        "AdaptiveChunker.chunk_pdf_with_layout",
        "AdaptiveChunker._chunk_pdf_layout_aware",
        "AdaptiveChunker._chunk_multicolumn_pdf",
        "AdaptiveChunker._chunk_single_column_pdf",
        "AdaptiveChunker._split_content_smart",
        "AdaptiveChunker._analyze_chunk_structure",
        "AdaptiveChunker._add_pdf_metadata",
        "AdaptiveChunker.get_pdf_chunking_summary",
        "AdaptiveChunker._classify_content_type",
        "AdaptiveChunker._hierarchical_chunking",
        "AdaptiveChunker._section_based_chunking",
        "AdaptiveChunker._semantic_chunking",
        "AdaptiveChunker._fallback_chunking",
        "AdaptiveChunker._calculate_adaptive_chunk_size",
        "AdaptiveChunker._get_section_level",
        "AdaptiveChunker._split_large_section",
        "AdaptiveChunker._establish_chunk_relationships",
        "AdaptiveChunker._calculate_keyword_density",
        "AdaptiveChunker._calculate_readability",
        "AdaptiveChunker._assess_complexity",
        "AdaptiveChunker.get_chunking_analytics",
        "__post_init__",
        "__post_init__",
        "to_langchain_document",
        "__init__",
        "analyze_structure",
        "_calculate_complexity_indicators",
        "__init__",
        "calculate_coherence_score",
        "_semantic_coherence",
        "_lexical_coherence",
        "find_optimal_boundaries",
        "__init__",
        "chunk_documents",
        "_chunk_single_document",
        "chunk_pdf_with_layout",
        "_chunk_pdf_layout_aware",
        "_chunk_multicolumn_pdf",
        "_chunk_single_column_pdf",
        "_split_content_smart",
        "_analyze_chunk_structure",
        "_add_pdf_metadata",
        "get_pdf_chunking_summary",
        "_classify_content_type",
        "_hierarchical_chunking",
        "_section_based_chunking",
        "_semantic_chunking",
        "_fallback_chunking",
        "_calculate_adaptive_chunk_size",
        "_get_section_level",
        "_split_large_section",
        "_establish_chunk_relationships",
        "_calculate_keyword_density",
        "_calculate_readability",
        "_assess_complexity",
        "get_chunking_analytics"
      ],
      "classes": [
        "ChunkMetadata",
        "AdaptiveChunk",
        "DocumentStructureAnalyzer",
        "SemanticCoherenceAnalyzer",
        "AdaptiveChunker"
      ],
      "lines_of_code": 830,
      "complexity_score": 196
    },
    "src.__init__": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/__init__.py",
      "functions": [],
      "classes": [],
      "lines_of_code": 0,
      "complexity_score": 0
    },
    "src.embedding_service": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/embedding_service.py",
      "functions": [
        "EmbeddingService.__init__",
        "EmbeddingService.initialize",
        "EmbeddingService.process_and_embed_documents",
        "EmbeddingService.add_documents_to_existing_store",
        "EmbeddingService.search_documents",
        "EmbeddingService.get_retriever",
        "EmbeddingService.reset_store",
        "EmbeddingService.get_store_status",
        "EmbeddingService.export_all_documents",
        "__init__",
        "initialize",
        "process_and_embed_documents",
        "add_documents_to_existing_store",
        "search_documents",
        "get_retriever",
        "reset_store",
        "get_store_status",
        "export_all_documents"
      ],
      "classes": [
        "EmbeddingService"
      ],
      "lines_of_code": 177,
      "complexity_score": 27
    },
    "src.model_manager": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/model_manager.py",
      "functions": [
        "ModelInfo.__post_init__",
        "ModelDownloadProgress.__init__",
        "ModelDownloadProgress.update_progress",
        "ModelDownloadProgress.get_progress_percentage",
        "ModelDownloadProgress.get_speed_mbps",
        "ModelDownloadProgress.get_eta_seconds",
        "ModelManager.__init__",
        "ModelManager._initialize_available_models",
        "ModelManager.get_models_by_task",
        "ModelManager.get_model_info",
        "ModelManager.is_model_downloaded",
        "ModelManager.get_model_path",
        "ModelManager.estimate_total_download_size",
        "ModelManager.download_model",
        "ModelManager.download_multiple_models",
        "ModelManager.delete_model",
        "ModelManager.get_download_progress",
        "ModelManager.get_storage_info",
        "ModelManager._get_directory_size_mb",
        "ModelManager._save_model_registry",
        "ModelManager.load_model_registry",
        "ModelManager.get_recommended_models",
        "ModelManager.get_high_performance_models",
        "ModelManager.get_lightweight_models",
        "__post_init__",
        "__init__",
        "update_progress",
        "get_progress_percentage",
        "get_speed_mbps",
        "get_eta_seconds",
        "__init__",
        "_initialize_available_models",
        "get_models_by_task",
        "get_model_info",
        "is_model_downloaded",
        "get_model_path",
        "estimate_total_download_size",
        "download_model",
        "download_multiple_models",
        "delete_model",
        "get_download_progress",
        "get_storage_info",
        "_get_directory_size_mb",
        "_save_model_registry",
        "load_model_registry",
        "get_recommended_models",
        "get_high_performance_models",
        "get_lightweight_models",
        "individual_callback"
      ],
      "classes": [
        "ModelInfo",
        "ModelDownloadProgress",
        "ModelManager"
      ],
      "lines_of_code": 428,
      "complexity_score": 89
    },
    "src.universal_file_processor": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/universal_file_processor.py",
      "functions": [
        "UniversalFileProcessor.__init__",
        "UniversalFileProcessor.process_file",
        "UniversalFileProcessor._process_excel",
        "UniversalFileProcessor._process_csv",
        "UniversalFileProcessor._process_powerpoint",
        "UniversalFileProcessor._process_image",
        "UniversalFileProcessor._process_json",
        "UniversalFileProcessor._process_xml",
        "UniversalFileProcessor._process_yaml",
        "UniversalFileProcessor._process_html",
        "UniversalFileProcessor._process_rtf",
        "UniversalFileProcessor._process_svg",
        "UniversalFileProcessor._process_ebook",
        "UniversalFileProcessor._process_generic",
        "UniversalFileProcessor._clean_dataframe",
        "UniversalFileProcessor._dataframe_to_text",
        "UniversalFileProcessor._json_to_text",
        "UniversalFileProcessor._xml_to_text",
        "UniversalFileProcessor._yaml_to_text",
        "UniversalFileProcessor.get_supported_formats",
        "__init__",
        "process_file",
        "_process_excel",
        "_process_csv",
        "_process_powerpoint",
        "_process_image",
        "_process_json",
        "_process_xml",
        "_process_yaml",
        "_process_html",
        "_process_rtf",
        "_process_svg",
        "_process_ebook",
        "_process_generic",
        "_clean_dataframe",
        "_dataframe_to_text",
        "_json_to_text",
        "_xml_to_text",
        "_yaml_to_text",
        "get_supported_formats"
      ],
      "classes": [
        "FileProcessingResult",
        "UniversalFileProcessor"
      ],
      "lines_of_code": 882,
      "complexity_score": 148
    },
    "src.offline_rag": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/offline_rag.py",
      "functions": [
        "OfflineRAG.__init__",
        "OfflineRAG.initialize",
        "OfflineRAG.set_selected_models",
        "OfflineRAG.get_model_status",
        "OfflineRAG.process_documents",
        "OfflineRAG.ask_question",
        "OfflineRAG._fallback_answer",
        "OfflineRAG.generate_summary",
        "OfflineRAG.search_documents",
        "OfflineRAG.get_status",
        "__init__",
        "initialize",
        "set_selected_models",
        "get_model_status",
        "process_documents",
        "ask_question",
        "_fallback_answer",
        "generate_summary",
        "search_documents",
        "get_status"
      ],
      "classes": [
        "OfflineRAG"
      ],
      "lines_of_code": 281,
      "complexity_score": 62
    },
    "src.document_loader": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/document_loader.py",
      "functions": [
        "DocumentProcessor.__init__",
        "DocumentProcessor.load_document",
        "DocumentProcessor.load_multiple_documents",
        "DocumentProcessor.split_documents",
        "DocumentProcessor.process_documents",
        "DocumentProcessor.get_uploaded_files",
        "DocumentProcessor.validate_file",
        "DocumentProcessor.get_multimodal_elements",
        "DocumentProcessor.get_tables",
        "DocumentProcessor.get_images",
        "DocumentProcessor.get_processing_summary",
        "DocumentProcessor.clear_multimodal_cache",
        "DocumentProcessor.get_supported_formats",
        "DocumentProcessor.validate_file_support",
        "__init__",
        "load_document",
        "load_multiple_documents",
        "split_documents",
        "process_documents",
        "get_uploaded_files",
        "validate_file",
        "get_multimodal_elements",
        "get_tables",
        "get_images",
        "get_processing_summary",
        "clear_multimodal_cache",
        "get_supported_formats",
        "validate_file_support"
      ],
      "classes": [
        "DocumentProcessor"
      ],
      "lines_of_code": 230,
      "complexity_score": 68
    },
    "src.graph_enhanced_rag": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/graph_enhanced_rag.py",
      "functions": [
        "Entity.to_dict",
        "Relation.to_dict",
        "EntityExtractor.__init__",
        "EntityExtractor._load_entity_patterns",
        "EntityExtractor.extract_entities",
        "EntityExtractor._extract_spacy_entities",
        "EntityExtractor._extract_pattern_entities",
        "EntityExtractor._extract_noun_phrase_entities",
        "EntityExtractor._deduplicate_entities",
        "EntityExtractor._merge_entities",
        "EntityExtractor._generate_entity_id",
        "RelationExtractor.__init__",
        "RelationExtractor._load_relation_patterns",
        "RelationExtractor.extract_relations",
        "RelationExtractor._extract_pattern_relations",
        "RelationExtractor._extract_dependency_relations",
        "RelationExtractor._extract_cooccurrence_relations",
        "RelationExtractor._find_entities_in_span",
        "RelationExtractor._infer_relation_type",
        "RelationExtractor._deduplicate_relations",
        "RelationExtractor._generate_relation_id",
        "KnowledgeGraph.__init__",
        "KnowledgeGraph.add_entity",
        "KnowledgeGraph.add_relation",
        "KnowledgeGraph.find_entities",
        "KnowledgeGraph.find_related_entities",
        "KnowledgeGraph._calculate_path_confidence",
        "KnowledgeGraph.query_graph",
        "KnowledgeGraph.get_graph_statistics",
        "KnowledgeGraph.export_graph",
        "GraphEnhancedRAG.__init__",
        "GraphEnhancedRAG.process_documents",
        "GraphEnhancedRAG.enhanced_query",
        "GraphEnhancedRAG.get_entity_context",
        "GraphEnhancedRAG._generate_entity_summary",
        "GraphEnhancedRAG.clear_graph",
        "GraphEnhancedRAG.get_capabilities",
        "to_dict",
        "to_dict",
        "__init__",
        "_load_entity_patterns",
        "extract_entities",
        "_extract_spacy_entities",
        "_extract_pattern_entities",
        "_extract_noun_phrase_entities",
        "_deduplicate_entities",
        "_merge_entities",
        "_generate_entity_id",
        "__init__",
        "_load_relation_patterns",
        "extract_relations",
        "_extract_pattern_relations",
        "_extract_dependency_relations",
        "_extract_cooccurrence_relations",
        "_find_entities_in_span",
        "_infer_relation_type",
        "_deduplicate_relations",
        "_generate_relation_id",
        "__init__",
        "add_entity",
        "add_relation",
        "find_entities",
        "find_related_entities",
        "_calculate_path_confidence",
        "query_graph",
        "get_graph_statistics",
        "export_graph",
        "__init__",
        "process_documents",
        "enhanced_query",
        "get_entity_context",
        "_generate_entity_summary",
        "clear_graph",
        "get_capabilities"
      ],
      "classes": [
        "Entity",
        "Relation",
        "KnowledgeTriple",
        "GraphQuery",
        "EntityExtractor",
        "RelationExtractor",
        "KnowledgeGraph",
        "GraphEnhancedRAG"
      ],
      "lines_of_code": 741,
      "complexity_score": 181
    },
    "src.redis_cache": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/redis_cache.py",
      "functions": [
        "CacheMetrics.update_hit_rate",
        "CacheEntry.is_expired",
        "CacheEntry.update_access",
        "CacheManager.__init__",
        "CacheManager._generate_cache_key",
        "CacheManager._serialize_value",
        "CacheManager._deserialize_value",
        "RedisCache.__init__",
        "RedisCache._connect",
        "RedisCache.is_available",
        "RedisCache.get",
        "RedisCache.set",
        "RedisCache.delete",
        "RedisCache.clear_namespace",
        "RedisCache.get_stats",
        "InMemoryCache.__init__",
        "InMemoryCache._cleanup_expired",
        "InMemoryCache.get",
        "InMemoryCache.set",
        "InMemoryCache.delete",
        "InMemoryCache.clear_namespace",
        "InMemoryCache.get_stats",
        "SmartCache.__init__",
        "SmartCache.get",
        "SmartCache.set",
        "SmartCache.delete",
        "SmartCache.clear_namespace",
        "SmartCache.get_stats",
        "SmartCache.is_redis_available",
        "cached_method",
        "cache_warming_job",
        "update_hit_rate",
        "is_expired",
        "update_access",
        "__init__",
        "_generate_cache_key",
        "_serialize_value",
        "_deserialize_value",
        "__init__",
        "_connect",
        "is_available",
        "get",
        "set",
        "delete",
        "clear_namespace",
        "get_stats",
        "__init__",
        "_cleanup_expired",
        "get",
        "set",
        "delete",
        "clear_namespace",
        "get_stats",
        "__init__",
        "get",
        "set",
        "delete",
        "clear_namespace",
        "get_stats",
        "is_redis_available",
        "decorator",
        "wrapper"
      ],
      "classes": [
        "CacheMetrics",
        "CacheEntry",
        "CacheManager",
        "RedisCache",
        "InMemoryCache",
        "SmartCache"
      ],
      "lines_of_code": 457,
      "complexity_score": 120
    },
    "src.advanced_query_intelligence": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/src/advanced_query_intelligence.py",
      "functions": [
        "IntentClassifier.__init__",
        "IntentClassifier._initialize_ml_components",
        "IntentClassifier._load_training_data",
        "IntentClassifier.classify_intent",
        "IntentClassifier._rule_based_classification",
        "IntentClassifier._ml_based_classification",
        "IntentClassifier._semantic_classification",
        "IntentClassifier._combine_classification_results",
        "IntentClassifier._classify_reasoning_type",
        "IntentClassifier._determine_complexity",
        "IntentClassifier._extract_domain_context",
        "IntentClassifier._detect_temporal_aspect",
        "QueryRewriter.__init__",
        "QueryRewriter.rewrite_query",
        "QueryRewriter._clarify_ambiguous_terms",
        "QueryRewriter._expand_with_context",
        "QueryRewriter._simplify_complex_query",
        "QueryRewriter._add_specificity",
        "QueryRewriter._enhance_semantics",
        "QueryRewriter._improve_structure",
        "QueryRewriter._calculate_rewrite_confidence",
        "QueryRewriter._identify_improvements",
        "QueryRewriter._generate_rewrite_reasoning",
        "AdvancedQueryIntelligence.__init__",
        "AdvancedQueryIntelligence.process_query",
        "AdvancedQueryIntelligence._update_history",
        "AdvancedQueryIntelligence._suggest_enhancement_strategies",
        "AdvancedQueryIntelligence._calculate_improvement_potential",
        "AdvancedQueryIntelligence.get_query_analytics",
        "AdvancedQueryIntelligence._analyze_recent_trends",
        "AdvancedQueryIntelligence._calculate_complexity_trend",
        "__init__",
        "_initialize_ml_components",
        "_load_training_data",
        "classify_intent",
        "_rule_based_classification",
        "_ml_based_classification",
        "_semantic_classification",
        "_combine_classification_results",
        "_classify_reasoning_type",
        "_determine_complexity",
        "_extract_domain_context",
        "_detect_temporal_aspect",
        "__init__",
        "rewrite_query",
        "_clarify_ambiguous_terms",
        "_expand_with_context",
        "_simplify_complex_query",
        "_add_specificity",
        "_enhance_semantics",
        "_improve_structure",
        "_calculate_rewrite_confidence",
        "_identify_improvements",
        "_generate_rewrite_reasoning",
        "__init__",
        "process_query",
        "_update_history",
        "_suggest_enhancement_strategies",
        "_calculate_improvement_potential",
        "get_query_analytics",
        "_analyze_recent_trends",
        "_calculate_complexity_trend"
      ],
      "classes": [
        "QueryIntent",
        "QueryRewrite",
        "IntentClassifier",
        "QueryRewriter",
        "AdvancedQueryIntelligence"
      ],
      "lines_of_code": 618,
      "complexity_score": 187
    },
    "services.document_processor.service": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/services/document_processor/service.py",
      "functions": [
        "DocumentProcessingService.__init__",
        "DocumentProcessingService.initialize",
        "DocumentProcessingService.shutdown",
        "DocumentProcessingService.health_check",
        "DocumentProcessingService._setup_document_routes",
        "DocumentProcessingService._process_document_async",
        "DocumentProcessingService._process_document",
        "DocumentProcessingService._convert_pdf_to_chunks",
        "DocumentProcessingService._convert_universal_to_chunks",
        "DocumentProcessingService._enhance_with_multimodal",
        "__init__",
        "initialize",
        "shutdown",
        "health_check",
        "_setup_document_routes",
        "_process_document_async",
        "_process_document",
        "_convert_pdf_to_chunks",
        "_convert_universal_to_chunks",
        "_enhance_with_multimodal",
        "process_uploaded_file",
        "process_file_by_path",
        "get_document_status",
        "get_processing_stats"
      ],
      "classes": [
        "DocumentProcessingRequest",
        "DocumentChunk",
        "ProcessedDocument",
        "DocumentProcessingService"
      ],
      "lines_of_code": 450,
      "complexity_score": 53
    },
    "services.api_gateway.gateway": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/services/api_gateway/gateway.py",
      "functions": [
        "EnterpriseAPIGateway.__init__",
        "EnterpriseAPIGateway.initialize",
        "EnterpriseAPIGateway.shutdown",
        "EnterpriseAPIGateway.health_check",
        "EnterpriseAPIGateway._setup_middleware",
        "EnterpriseAPIGateway._setup_gateway_routes",
        "EnterpriseAPIGateway._authenticate_request",
        "EnterpriseAPIGateway._check_rate_limit",
        "EnterpriseAPIGateway._route_request",
        "EnterpriseAPIGateway._proxy_to_service",
        "EnterpriseAPIGateway._orchestrate_rag_pipeline",
        "EnterpriseAPIGateway._register_default_services",
        "EnterpriseAPIGateway._initialize_rate_limiting",
        "EnterpriseAPIGateway._update_gateway_stats",
        "EnterpriseAPIGateway._start_health_checking",
        "EnterpriseAPIGateway._start_service_discovery",
        "LoadBalancer.__init__",
        "LoadBalancer.add_instance",
        "LoadBalancer.get_instance",
        "HealthChecker.__init__",
        "HealthChecker.start",
        "HealthChecker.stop",
        "__init__",
        "initialize",
        "shutdown",
        "health_check",
        "_setup_middleware",
        "_setup_gateway_routes",
        "_authenticate_request",
        "_check_rate_limit",
        "_route_request",
        "_proxy_to_service",
        "_orchestrate_rag_pipeline",
        "_register_default_services",
        "_initialize_rate_limiting",
        "_update_gateway_stats",
        "_start_health_checking",
        "_start_service_discovery",
        "__init__",
        "add_instance",
        "get_instance",
        "__init__",
        "start",
        "stop",
        "add_request_tracking",
        "rate_limiting_middleware",
        "gateway_info",
        "gateway_request",
        "process_document",
        "get_document",
        "analyze_query",
        "enhance_query",
        "search_documents",
        "batch_search",
        "complete_rag_pipeline",
        "list_services",
        "get_gateway_stats",
        "custom_openapi"
      ],
      "classes": [
        "APIVersion",
        "ServiceRoute",
        "APIGatewayRequest",
        "APIGatewayResponse",
        "RateLimitConfig",
        "AuthenticationConfig",
        "EnterpriseAPIGateway",
        "LoadBalancer",
        "HealthChecker"
      ],
      "lines_of_code": 616,
      "complexity_score": 109
    },
    "services.observability.monitoring": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/services/observability/monitoring.py",
      "functions": [
        "Alert.to_dict",
        "ObservabilityService.__init__",
        "ObservabilityService.initialize",
        "ObservabilityService.shutdown",
        "ObservabilityService.health_check",
        "ObservabilityService._initialize_metrics",
        "ObservabilityService._initialize_tracing",
        "ObservabilityService._setup_monitoring_routes",
        "ObservabilityService._start_background_monitoring",
        "ObservabilityService._system_metrics_collector",
        "ObservabilityService._service_health_monitor",
        "ObservabilityService._alert_evaluator",
        "ObservabilityService._data_cleanup_task",
        "ObservabilityService._collect_system_metrics",
        "ObservabilityService._check_system_alerts",
        "ObservabilityService._trigger_alert",
        "ObservabilityService._record_custom_metric",
        "ObservabilityService._register_default_metrics",
        "ObservabilityService._setup_default_alerts",
        "ObservabilityService._initialize_metric_collection",
        "ObservabilityService._update_service_metrics",
        "ObservabilityService._evaluate_alert_rule",
        "ObservabilityService._check_metrics_health",
        "ObservabilityService._check_alerts_health",
        "to_dict",
        "__init__",
        "initialize",
        "shutdown",
        "health_check",
        "_initialize_metrics",
        "_initialize_tracing",
        "_setup_monitoring_routes",
        "_start_background_monitoring",
        "_system_metrics_collector",
        "_service_health_monitor",
        "_alert_evaluator",
        "_data_cleanup_task",
        "_collect_system_metrics",
        "_check_system_alerts",
        "_trigger_alert",
        "_record_custom_metric",
        "_register_default_metrics",
        "_setup_default_alerts",
        "_initialize_metric_collection",
        "_update_service_metrics",
        "_evaluate_alert_rule",
        "_check_metrics_health",
        "_check_alerts_health",
        "get_prometheus_metrics",
        "get_system_metrics",
        "get_service_metrics",
        "get_alerts",
        "resolve_alert",
        "record_custom_metric",
        "get_dashboard_overview"
      ],
      "classes": [
        "AlertSeverity",
        "MetricType",
        "Alert",
        "MetricDefinition",
        "ObservabilityConfig",
        "SystemMetrics",
        "ServiceMetrics",
        "ObservabilityService"
      ],
      "lines_of_code": 641,
      "complexity_score": 126
    },
    "services.query_intelligence.service": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/services/query_intelligence/service.py",
      "functions": [
        "QueryIntelligenceService.__init__",
        "QueryIntelligenceService.initialize",
        "QueryIntelligenceService.shutdown",
        "QueryIntelligenceService.health_check",
        "QueryIntelligenceService._setup_query_routes",
        "QueryIntelligenceService._perform_comprehensive_analysis",
        "QueryIntelligenceService._analyze_query_intent",
        "QueryIntelligenceService._classify_query_type",
        "QueryIntelligenceService._assess_query_complexity",
        "QueryIntelligenceService._make_routing_decision",
        "QueryIntelligenceService._extract_topics",
        "QueryIntelligenceService._analyze_temporal_context",
        "QueryIntelligenceService._detect_domain",
        "QueryIntelligenceService._enhance_query_intelligence",
        "QueryIntelligenceService._generate_enhanced_query",
        "QueryIntelligenceService._extract_expansion_terms",
        "QueryIntelligenceService._generate_suggested_filters",
        "QueryIntelligenceService._rewrite_query_with_strategy",
        "QueryIntelligenceService._calculate_overall_confidence",
        "QueryIntelligenceService._update_stats",
        "__init__",
        "initialize",
        "shutdown",
        "health_check",
        "_setup_query_routes",
        "_perform_comprehensive_analysis",
        "_analyze_query_intent",
        "_classify_query_type",
        "_assess_query_complexity",
        "_make_routing_decision",
        "_extract_topics",
        "_analyze_temporal_context",
        "_detect_domain",
        "_enhance_query_intelligence",
        "_generate_enhanced_query",
        "_extract_expansion_terms",
        "_generate_suggested_filters",
        "_rewrite_query_with_strategy",
        "_calculate_overall_confidence",
        "_update_stats",
        "analyze_query",
        "enhance_query",
        "route_query",
        "rewrite_query",
        "get_intelligence_stats"
      ],
      "classes": [
        "QueryType",
        "QueryComplexity",
        "QueryIntent",
        "QueryAnalysisRequest",
        "QueryRewriteRequest",
        "QueryRoutingDecision",
        "EnhancedQuery",
        "QueryIntelligenceService"
      ],
      "lines_of_code": 635,
      "complexity_score": 150
    },
    "services.vector_search.service": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/services/vector_search/service.py",
      "functions": [
        "VectorSearchService.__init__",
        "VectorSearchService.initialize",
        "VectorSearchService.shutdown",
        "VectorSearchService.health_check",
        "VectorSearchService._setup_search_routes",
        "VectorSearchService._execute_search",
        "VectorSearchService._vector_search",
        "VectorSearchService._hybrid_search",
        "VectorSearchService._semantic_search",
        "VectorSearchService._contextual_search",
        "VectorSearchService._multimodal_search",
        "VectorSearchService._get_query_embedding",
        "VectorSearchService._rerank_results",
        "VectorSearchService._generate_cache_key",
        "VectorSearchService._is_cache_valid",
        "VectorSearchService._update_search_stats",
        "VectorSearchService._initialize_vector_stores",
        "VectorSearchService._load_collections_metadata",
        "VectorSearchService._perform_simple_health_check",
        "VectorSearchService._index_documents_async",
        "VectorSearchService._get_collection_runtime_stats",
        "VectorSearchService._expand_query_semantically",
        "VectorSearchService._merge_and_deduplicate_results",
        "VectorSearchService._apply_contextual_ranking",
        "VectorSearchService._apply_multimodal_ranking",
        "__init__",
        "initialize",
        "shutdown",
        "health_check",
        "_setup_search_routes",
        "_execute_search",
        "_vector_search",
        "_hybrid_search",
        "_semantic_search",
        "_contextual_search",
        "_multimodal_search",
        "_get_query_embedding",
        "_rerank_results",
        "_generate_cache_key",
        "_is_cache_valid",
        "_update_search_stats",
        "_initialize_vector_stores",
        "_load_collections_metadata",
        "_perform_simple_health_check",
        "_index_documents_async",
        "_get_collection_runtime_stats",
        "_expand_query_semantically",
        "_merge_and_deduplicate_results",
        "_apply_contextual_ranking",
        "_apply_multimodal_ranking",
        "vector_search",
        "batch_search",
        "index_documents",
        "list_collections",
        "get_collection_info",
        "delete_collection",
        "get_search_stats"
      ],
      "classes": [
        "SearchStrategy",
        "RerankingStrategy",
        "SearchRequest",
        "SearchResult",
        "SearchResponse",
        "IndexRequest",
        "VectorSearchService"
      ],
      "lines_of_code": 691,
      "complexity_score": 140
    },
    "services.base.service_base": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/services/base/service_base.py",
      "functions": [
        "ServiceMetrics.to_dict",
        "CircuitBreaker.__init__",
        "CircuitBreaker.__call__",
        "CircuitBreaker.record_failure",
        "CircuitBreaker.reset",
        "BaseService.__init__",
        "BaseService._setup_logging",
        "BaseService._setup_observability",
        "BaseService._setup_redis",
        "BaseService._setup_routes",
        "BaseService.initialize",
        "BaseService.shutdown",
        "BaseService.health_check",
        "BaseService.add_circuit_breaker",
        "BaseService.cache_get",
        "BaseService.cache_set",
        "BaseService.publish_event",
        "BaseService.trace_operation",
        "BaseService.create_response",
        "BaseService.start",
        "BaseService.stop",
        "BaseService.run",
        "ServiceRegistry.__init__",
        "ServiceRegistry.register_service",
        "ServiceRegistry.discover_service",
        "ServiceRegistry.list_services",
        "to_dict",
        "__init__",
        "__call__",
        "record_failure",
        "reset",
        "__init__",
        "_setup_logging",
        "_setup_observability",
        "_setup_redis",
        "_setup_routes",
        "initialize",
        "shutdown",
        "health_check",
        "add_circuit_breaker",
        "cache_get",
        "cache_set",
        "publish_event",
        "trace_operation",
        "create_response",
        "start",
        "stop",
        "run",
        "__init__",
        "register_service",
        "discover_service",
        "list_services",
        "wrapper",
        "add_process_time_header",
        "health_check",
        "get_metrics",
        "service_info"
      ],
      "classes": [
        "ServiceStatus",
        "ServiceMetrics",
        "ServiceRequest",
        "ServiceResponse",
        "CircuitBreakerError",
        "CircuitBreaker",
        "BaseService",
        "ServiceRegistry"
      ],
      "lines_of_code": 461,
      "complexity_score": 79
    }
  },
  "test_details": {
    "test_setup": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/test_setup.py",
      "test_functions": [
        "test_imports",
        "test_src_modules",
        "test_directories",
        "test_env_setup"
      ],
      "test_classes": [],
      "covers_modules": [
        "src.embedding_service",
        "os",
        "src.config",
        "src.document_loader",
        "src.vector_store",
        "setup",
        "src.rag_chain"
      ],
      "lines_of_code": 141
    },
    "test_pdf_multimodal": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/test_pdf_multimodal.py",
      "test_functions": [
        "test_advanced_pdf_processor",
        "test_document_processor_integration",
        "test_enhanced_rag_system"
      ],
      "test_classes": [],
      "covers_modules": [
        "io",
        "src.enhanced_rag",
        "os",
        "src.document_loader",
        "src.config",
        "src.multimodal_rag",
        "src.advanced_pdf_processor"
      ],
      "lines_of_code": 290
    },
    "analyze_test_coverage": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/analyze_test_coverage.py",
      "test_functions": [
        "TestCoverageAnalyzer._discover_test_files",
        "TestCoverageAnalyzer._analyze_test_file",
        "TestCoverageAnalyzer._is_test_file",
        "TestCoverageAnalyzer._analyze_test_categories",
        "_discover_test_files",
        "_analyze_test_file",
        "_is_test_file",
        "_analyze_test_categories"
      ],
      "test_classes": [
        "TestInfo",
        "TestCoverageAnalyzer"
      ],
      "covers_modules": [
        "os"
      ],
      "lines_of_code": 537
    },
    "test_all_formats": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/test_all_formats.py",
      "test_functions": [
        "test_document_processor",
        "test_universal_processor"
      ],
      "test_classes": [],
      "covers_modules": [
        "os",
        "src.config",
        "src.document_loader",
        "src.universal_file_processor"
      ],
      "lines_of_code": 360
    },
    "tests.run_all_validations": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/tests/run_all_validations.py",
      "test_functions": [],
      "test_classes": [],
      "covers_modules": [
        "os"
      ],
      "lines_of_code": 365
    },
    "tests.integration_validation": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/tests/integration_validation.py",
      "test_functions": [
        "_test_service_integration",
        "_test_complete_rag_pipeline",
        "_test_multimodal_processing",
        "_test_query_intelligence_workflow",
        "_test_vector_search_integration",
        "_test_cross_service_data_flow",
        "_test_error_handling_recovery",
        "_test_performance_under_load",
        "_test_data_consistency",
        "_test_user_experience_workflows",
        "_test_service_discovery_integration",
        "_test_health_check_integration",
        "_test_circuit_breaker_integration",
        "_create_test_text_document",
        "_create_test_pdf_bytes",
        "_create_test_json_document"
      ],
      "test_classes": [
        "IntegrationTestResult"
      ],
      "covers_modules": [
        "os",
        "io"
      ],
      "lines_of_code": 952
    },
    "tests.security_validation": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/tests/security_validation.py",
      "test_functions": [
        "_test_authentication_security",
        "_test_input_validation_security",
        "_test_rate_limiting_security",
        "_test_data_protection_security",
        "_test_api_security",
        "_test_session_management",
        "_test_error_handling_security",
        "_test_transport_security",
        "_test_unauthenticated_access",
        "_test_invalid_token_handling",
        "_test_token_expiration",
        "_test_role_based_access_control",
        "_test_jwt_security",
        "_test_sql_injection_protection",
        "_test_xss_protection",
        "_test_command_injection_protection",
        "_test_path_traversal_protection",
        "_test_json_injection_protection",
        "_test_basic_rate_limiting",
        "_test_burst_protection",
        "_test_per_user_rate_limiting",
        "_test_ip_rate_limiting",
        "_test_sensitive_data_exposure",
        "_test_data_encryption",
        "_test_pii_handling",
        "_test_http_methods_security",
        "_test_error_information_disclosure",
        "_test_security_headers",
        "_test_content_type_validation",
        "_test_api_versioning_security",
        "_test_cors_policy",
        "_test_session_fixation",
        "_test_session_timeout",
        "_test_stack_trace_exposure",
        "_test_debug_information_exposure",
        "_test_https_enforcement"
      ],
      "test_classes": [
        "SecurityTestResult"
      ],
      "covers_modules": [
        "os",
        "re"
      ],
      "lines_of_code": 983
    },
    "tests.observability_validation": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/tests/observability_validation.py",
      "test_functions": [
        "_test_prometheus_availability",
        "_test_metrics_endpoints",
        "_test_expected_metrics",
        "_test_metrics_data_quality",
        "_test_metrics_retention",
        "_test_grafana_availability",
        "_test_dashboard_availability",
        "_test_grafana_data_sources",
        "_test_jaeger_availability",
        "_test_trace_collection",
        "_test_service_trace_discovery",
        "_test_observability_service_health",
        "_test_observability_metrics_api",
        "_test_system_metrics_collection",
        "_test_health_check_endpoints",
        "_test_service_status_monitoring",
        "_test_health_aggregation",
        "_test_alert_rules",
        "_test_alert_conditions",
        "_test_alert_delivery_mechanism",
        "_test_structured_logging",
        "_test_log_correlation",
        "_test_log_management",
        "_test_response_time_analytics",
        "_test_throughput_analytics",
        "_test_error_rate_analytics"
      ],
      "test_classes": [
        "ObservabilityTestResult"
      ],
      "covers_modules": [
        "os",
        "re"
      ],
      "lines_of_code": 854
    },
    "tests.performance_benchmarks": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/tests/performance_benchmarks.py",
      "test_functions": [
        "PerformanceTester._benchmark_stress_test",
        "_benchmark_stress_test"
      ],
      "test_classes": [
        "LoadTestConfig",
        "PerformanceTester"
      ],
      "covers_modules": [
        "os"
      ],
      "lines_of_code": 556
    },
    "tests.enterprise_validation": {
      "path": "/Users/fenilsonani/Developer/fenilcom/rag-document-qa/tests/enterprise_validation.py",
      "test_functions": [
        "_test_redis_health",
        "_test_service_health",
        "_run_performance_test",
        "_test_service_independence",
        "_test_service_discovery",
        "_test_circuit_breakers",
        "_test_inter_service_communication",
        "_test_authentication",
        "_test_rate_limiting",
        "_test_unauthorized_access",
        "_test_encryption",
        "_test_metrics_collection",
        "_test_health_monitoring",
        "_test_distributed_tracing",
        "_test_document_processing",
        "_test_query_intelligence",
        "_test_vector_search",
        "_test_complete_rag_pipeline",
        "_test_concurrent_requests",
        "_test_sustained_load"
      ],
      "test_classes": [
        "TestResult"
      ],
      "covers_modules": [
        "os",
        "redis"
      ],
      "lines_of_code": 701
    }
  }
}